<script setup lang="ts">
import { ref, reactive, computed } from 'vue'
import {
  MoreHorizontal,
  Database,
  Activity,
  Award,
  Users,
  BarChart,
  Grid,
  Power,
  LayoutDashboard,
  ShoppingCart,
  FileText,
  Menu,
  X,
  ChevronRight
} from 'lucide-vue-next'

// Simple mobile drawer state
const isOpen = ref(false)

const toggleDrawer = () => {
  isOpen.value = !isOpen.value
}

const closeDrawer = () => {
  isOpen.value = false
}

// Active section/item tracking
const activeSection = ref(0)
const activeItem = ref(0)

const setActiveItem = (sectionIndex: number, itemIndex: number) => {
  activeSection.value = sectionIndex
  activeItem.value = itemIndex
  // Close drawer after selection
  closeDrawer()
}

const isActive = (sectionIndex: number, itemIndex: number) => {
  return activeSection.value === sectionIndex && activeItem.value === itemIndex
}

// Navigation data (using the same structure from the original component)
const navigation = reactive([
  {
    title: 'Home',
    items: [
      { name: 'Dashboard', icon: LayoutDashboard, badge: null },
      { name: 'Facturas', icon: FileText, badge: null },
      { name: 'Ventas', icon: ShoppingCart, badge: '5' }
    ]
  },
  {
    title: 'Data',
    items: [
      { name: 'Data hub', icon: Database, badge: null },
      { name: 'Monitoring', icon: Activity, badge: null },
      { name: 'Metrics', icon: Award, badge: null }
    ]
  },
  {
    title: 'Workspaces',
    items: [
      { name: 'Workspaces', icon: Grid, badge: null },
      { name: 'My workspace', icon: Users, badge: null },
      { name: 'ESG Indicators', icon: BarChart, badge: '3' }
    ]
  },
  {
    title: 'More',
    items: [
      { name: 'More...', icon: MoreHorizontal, badge: null },
      { name: 'Power BI', icon: Power, badge: null }
    ]
  }
])

// Get active item name for mobile header
const activeItemName = computed(() => {
  const section = navigation[activeSection.value]
  if (section && section.items[activeItem.value]) {
    return section.items[activeItem.value].name
  }
  return 'Dashboard'
})

// Get active icon for mobile header
const ActiveIcon = computed(() => {
  const section = navigation[activeSection.value]
  if (section && section.items[activeItem.value]) {
    return section.items[activeItem.value].icon
  }
  return LayoutDashboard
})
</script>

<template>
  <div>
    <!-- Mobile Header - Always visible -->
    <header
      class="fixed top-0 left-0 right-0 z-40 h-16 flex items-center justify-between px-4 bg-white dark:bg-gray-900 border-b dark:border-gray-800 border-gray-100 shadow-sm"
    >
      <div class="flex items-center space-x-3">
        <button
          @click="toggleDrawer"
          class="w-10 h-10 flex items-center justify-center rounded-lg text-gray-500 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800 focus:outline-none transition-colors"
          aria-label="Toggle menu"
        >
          <Menu class="w-6 h-6" />
        </button>

        <div class="flex items-center space-x-2">
          <div
            class="w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0 bg-primary-50 dark:bg-gray-800"
          >
            <component
              :is="ActiveIcon"
              class="w-5 h-5 text-primary-500 dark:text-primary-400"
            />
          </div>
          <span
            class="text-lg font-medium whitespace-nowrap dark:text-white text-gray-800"
          >
            {{ activeItemName }}
          </span>
        </div>
      </div>

      <!-- User Avatar -->
      <div class="flex items-center">
        <img
          src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-dvSZhyStgm9DNolueaXK6QwebuDdl4.png"
          alt="User avatar"
          class="h-9 w-9 rounded-full border-2 border-primary-500"
        />
      </div>
    </header>

    <!-- Mobile Drawer -->
    <UDrawer
      direction="left"
      :dismissible="true"
      :open="isOpen"
      :handle="true"
      :ui="{
        content: 'ring-0 rounded-none'
      }"
      aria-describedby="drawer-description"
      aria-label="Sidebar de navegaciÃ³n"
    >
      <template #content>
        <aside
          class="relative w-[85%] max-w-xs bg-white dark:bg-gray-900 shadow-xl transform transition-transform duration-200 ease-out"
        >
          <!-- Drawer Header -->
          <div
            class="flex items-center justify-between h-16 px-4 border-b dark:border-gray-800 border-gray-100"
          >
            <div class="flex items-center space-x-3">
              <div
                class="w-9 h-9 rounded-lg flex items-center justify-center flex-shrink-0 bg-primary-500"
              >
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 400 400"
                  xmlns="http://www.w3.org/2000/svg"
                  class="text-white"
                >
                  <defs>
                    <mask id="barsMaskMobile">
                      <rect width="400" height="400" fill="white" />
                      <rect
                        x="80"
                        y="240"
                        width="60"
                        height="100"
                        fill="black"
                      />
                      <rect
                        x="170"
                        y="180"
                        width="60"
                        height="160"
                        fill="black"
                      />
                      <rect
                        x="260"
                        y="120"
                        width="60"
                        height="220"
                        fill="black"
                      />
                    </mask>
                  </defs>
                  <rect
                    width="400"
                    height="400"
                    rx="40"
                    fill="currentColor"
                    mask="url(#barsMaskMobile)"
                  />
                </svg>
              </div>
              <span
                class="text-lg font-semibold whitespace-nowrap dark:text-white text-gray-800"
              >
                CodeX
              </span>
            </div>
            <button
              @click="closeDrawer"
              class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
              aria-label="Close menu"
            >
              <X class="w-5 h-5 text-gray-500 dark:text-gray-400" />
            </button>
          </div>

          <!-- User Profile (Mobile) -->
          <div class="px-4 py-3 border-b dark:border-gray-800 border-gray-100">
            <div class="flex items-center space-x-3">
              <img
                src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-dvSZhyStgm9DNolueaXK6QwebuDdl4.png"
                alt="User avatar"
                class="h-12 w-12 rounded-full border-2 border-primary-500"
              />
              <div>
                <p class="text-sm font-medium dark:text-white text-gray-800">
                  Alex Johnson
                </p>
                <p class="text-xs dark:text-gray-400 text-gray-500">
                  Data Analyst
                </p>
              </div>
            </div>
          </div>

          <!-- Navigation Menu -->
          <div class="h-[calc(100%-144px)] overflow-y-auto">
            <nav class="p-2">
              <div class="space-y-4">
                <div
                  v-for="(section, sectionIndex) in navigation"
                  :key="`mobile-section-${sectionIndex}`"
                  class="mb-4"
                >
                  <!-- Section Title -->
                  <h3
                    class="px-3 py-2 text-xs font-bold uppercase tracking-wider dark:text-gray-400 text-gray-500 bg-gray-50 dark:bg-gray-800/50 rounded-md mb-2"
                  >
                    {{ section.title }}
                  </h3>

                  <div class="space-y-1">
                    <button
                      v-for="(item, itemIndex) in section.items"
                      :key="`mobile-item-${sectionIndex}-${itemIndex}`"
                      @click="setActiveItem(sectionIndex, itemIndex)"
                      class="group w-full flex items-center justify-between text-base font-normal rounded-lg py-3 px-4 relative cursor-pointer transition-colors"
                      :class="
                        isActive(sectionIndex, itemIndex)
                          ? 'bg-primary-50 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300'
                          : 'dark:text-gray-300 dark:hover:bg-gray-800/50 text-gray-700 hover:bg-gray-50'
                      "
                    >
                      <div class="flex items-center">
                        <div
                          class="w-9 h-9 rounded-full flex items-center justify-center mr-3"
                          :class="
                            isActive(sectionIndex, itemIndex)
                              ? 'bg-primary-100 dark:bg-primary-900/30'
                              : 'bg-gray-100 dark:bg-gray-800'
                          "
                        >
                          <component
                            :is="item.icon"
                            class="flex-shrink-0 h-5 w-5"
                            :class="
                              isActive(sectionIndex, itemIndex)
                                ? 'text-primary-600 dark:text-primary-400'
                                : 'text-gray-500 dark:text-gray-400'
                            "
                          />
                        </div>

                        <span
                          class="whitespace-nowrap tracking-wide"
                          :class="
                            isActive(sectionIndex, itemIndex)
                              ? 'font-medium'
                              : 'font-normal'
                          "
                        >
                          {{ item.name }}
                        </span>
                      </div>

                      <div class="flex items-center">
                        <span
                          v-if="item.badge"
                          class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium mr-2"
                          :class="
                            isActive(sectionIndex, itemIndex)
                              ? 'bg-primary-200 dark:bg-primary-800 text-primary-800 dark:text-primary-200'
                              : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
                          "
                        >
                          {{ item.badge }}
                        </span>
                        <ChevronRight
                          class="h-4 w-4 transition-transform"
                          :class="
                            isActive(sectionIndex, itemIndex)
                              ? 'text-primary-500 dark:text-primary-400 rotate-90'
                              : 'text-gray-400 dark:text-gray-600'
                          "
                        />
                      </div>
                    </button>
                  </div>
                </div>
              </div>
            </nav>
          </div>

          <!-- Bottom Actions -->
          <div
            class="absolute bottom-0 left-0 right-0 border-t dark:border-gray-800 border-gray-100 p-4"
          >
            <button
              class="w-full py-3 px-4 bg-primary-500 hover:bg-primary-600 text-white rounded-lg font-medium transition-colors flex items-center justify-center"
            >
              <Power class="w-5 h-5 mr-2" />
              Sign Out
            </button>
          </div>
        </aside>
      </template>
    </UDrawer>

    <!-- Main Content Area (with proper spacing for mobile) -->
    <main class="pt-16 px-4">
      <!-- Your page content goes here -->
      <slot></slot>
    </main>
  </div>
</template>

<style scoped>
/* Custom scrollbar for better mobile experience */
::-webkit-scrollbar {
  width: 4px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background-color: rgba(156, 163, 175, 0.5);
  border-radius: 20px;
}

.dark ::-webkit-scrollbar-thumb {
  background-color: rgba(75, 85, 99, 0.5);
}

/* Prevent content from being selectable in the drawer */
aside {
  -webkit-tap-highlight-color: transparent;
  user-select: none;
}

/* Smooth transitions */
.transition-transform {
  transition-property: transform;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.transition-colors {
  transition-property: background-color, border-color, color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
</style>
